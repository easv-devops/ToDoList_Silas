@page "/todolist"
@using ToDoList_Front.Clients
@rendermode InteractiveServer
@inject ItemsClient ItemsClient

<PageTitle>To-Do List</PageTitle>

@if (_items is null)
{
    <p>Loading...</p>
}
else
{
<table>
    <thead>
    <tr>
        <th>Id</th>
        <th>Text</th>
        <th>Is Completed</th>
        <th></th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in _items)
    {
    <tr>
        <td>@item.Id</td>
        <td>@item.Text</td>
        <td>@item.IsCompleted</td>
        <td><button @onclick="() => TestUpdate(item)">Update</button></td>
        <td><button @onclick="() => TestDelete(item)">Delete</button></td>
    </tr>
    }
    </tbody>
</table>
}

<button @onclick="TestAdd">Add</button>

@code {
    private Item[]? _items;
    
    protected override async Task OnInitializedAsync()
    {
        _items = await ItemsClient.GetItems();
    }

    private async void TestAdd()
    {
        ItemDTO item = new("Test", false, null);
        await ItemsClient.CreateItem(item);
        _items = await ItemsClient.GetItems();
        StateHasChanged();
    }
    
    private async void TestUpdate(Item item)
    {
        bool isCompleted = !item.IsCompleted;
        ItemDTO itemDto = new("Test", isCompleted, isCompleted ? DateTime.Now : null);
        await ItemsClient.UpdateItem(item.Id, itemDto);
        _items = await ItemsClient.GetItems();
        StateHasChanged();
    }
    
    private async void TestDelete(Item item)
    {
        await ItemsClient.DeleteItem(item.Id);
        _items = await ItemsClient.GetItems();
        StateHasChanged();
    }
}