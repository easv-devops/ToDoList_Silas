@using ToDoList_Front.Clients
@inject ItemsClient ItemsClient
@inject HistoryClient HistoryClient

<div class="task @_state">
    <input class="task-checkbox"
           type="checkbox" 
           checked="@Item.is_completed" 
           @onchange="() => HandleItemInvert(!Item.is_completed, Item)" 
    />
        
    <input class="task-text"
           type="text" 
           value="@Item.text" 
           @onchange="@(e => HandleItemUpdate(e.Value?.ToString() ?? string.Empty, Item))"
           @oninput="StartEditing"
    />
        
    <button class="task-button"
            @onclick="() => HandleItemDelete(Item)">
        Delete
    </button>
</div>


@code {
    [Parameter] public Item Item { get; set; } = new();
    [Parameter] public EventCallback OnItemChanged { get; set; }
    private string _state = "";
    
    private void StartEditing()
    {
        _state = "editing";
    }

    private async Task HandleItemDelete(Item item)
    {
        await ItemsClient.DeleteItem(item.id);
        await OnItemChanged.InvokeAsync();
        await HistoryClient.CreateHistory(new HistoryDto(item.text, $"\"{item.text}\" was deleted."));
    }

    private async Task HandleItemUpdate(string newText, Item item)
    {
        _state = "saved";
        ItemDto itemDto = new ItemDto(newText, item.is_completed, item.completed_date);
        await ItemsClient.UpdateItem(item.id, itemDto);
        await OnItemChanged.InvokeAsync();
        await HistoryClient.CreateHistory(new HistoryDto(item.text, $"\"{item.text}\" text was changed to \"{newText}\"."));
        await Task.Delay(1000);
        _state = "";
    }

    private async Task HandleItemInvert(bool isCompleted, Item item)
    {
        ItemDto itemDto = new ItemDto(item.text, isCompleted, isCompleted ? DateTime.Now : null);
        await ItemsClient.UpdateItem(item.id, itemDto);
        await OnItemChanged.InvokeAsync();
        await HistoryClient.CreateHistory(new HistoryDto(item.text, $"\"{item.text}\" was set as {(isCompleted ? "completed" : "not completed")}."));
    }
}