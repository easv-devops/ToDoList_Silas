@page "/todolist"
@using ToDoList_Front.Clients
@rendermode InteractiveServer
@inject ItemsClient ItemsClient
@inject IJSRuntime JSRuntime

<PageTitle>To-Do List</PageTitle>

@if (_items is null)
{
    <p>Loading...</p>
} else if (_items.Length == 0)
{
    <p>No items found.</p>
} else
{
    @foreach (var item in _items)
    {
        <span>
            <input type="checkbox" checked="@item.is_completed" @onchange="() => HandleItemInvert(!item.is_completed, item)" />
            <input id="@($"item-{item.id}")" type="text" @bind="item.text" @onblur="() => HandleItemUpdate(item)" @onkeydown="async e => await HandleKeyDown(e, item)" />
            <button @onclick="() => HandleItemDelete(item)">Delete</button>
        </span>
    }
}
<button @onclick="TestAddItem">Add Test Item</button>

@code {
    private Item[]? _items;

    protected override async Task OnInitializedAsync()
    {
        _items = await ItemsClient.GetItems();
    }
    
    private async Task HandleItemDelete(Item item)
    {
        await ItemsClient.DeleteItem(item.id);
        _items = await ItemsClient.GetItems();
        StateHasChanged();
    }
    
    private async Task HandleItemUpdate(Item item)
    {
        ItemDTO itemDto = new ItemDTO(item.text, item.is_completed, item.completed_date);
        await ItemsClient.UpdateItem(item.id, itemDto);
        _items = await ItemsClient.GetItems();
        StateHasChanged();
    }
    
    private async Task HandleItemInvert(bool isCompleted, Item item)
    {
        ItemDTO itemDto = new ItemDTO(item.text, isCompleted, isCompleted ? DateTime.Now : null);
        await ItemsClient.UpdateItem(item.id, itemDto);
        _items = await ItemsClient.GetItems();
        StateHasChanged();
    }
    
    private async Task HandleKeyDown(KeyboardEventArgs e, Item item)
    {
        if (e.Key == "Enter")
        {
            await JSRuntime.InvokeVoidAsync("blurElement", $"item-{item.id}");
        }
    }
    
    private async Task TestAddItem()
    {
        ItemDTO item = new ItemDTO("Test item", false, DateTime.Now);
        await ItemsClient.CreateItem(item);
        _items = await ItemsClient.GetItems();
        StateHasChanged();
    }
}