@page "/todolist"
@using ToDoList_Front.Clients
@rendermode InteractiveServer
@inject ItemsClient ItemsClient

<PageTitle>To-Do List</PageTitle>

<div class="list">
    @if (_showOnlyIncomplete)
    {
        <button @onclick="ToggleFilter">Show all tasks</button>
    } else
    {
        <button @onclick="ToggleFilter">Hide completed tasks</button>
    }
    
    @if (_items is null)
    {
        <p>Loading...</p>
    } else if (_items.Length == 0)
    {
        <p>No items found.</p>
    } else
    {
        @foreach (var item in _items)
        {
            if (!_showOnlyIncomplete || !item.is_completed)
            {
                <ListItem Item="@item" OnItemChanged="HandleItemChanged" />
            }
        }
    }
    <button @onclick="TestAddItem">Add Test Item</button>
</div>

@code {
    private Item[]? _items;
    private bool _showOnlyIncomplete;

    protected override async Task OnInitializedAsync()
    {
        _items = await ItemsClient.GetItems();
        // _items = new Item[]
        // {
        //     new (1, "Test item 1", false, DateTime.Now, DateTime.Today),
        //     new (2, "Test item 2", true, DateTime.Now, DateTime.Today),
        //     new (3, "Test item 3", false, DateTime.Now, DateTime.Today),
        //     new (4, "Test item 4", true, DateTime.Now, DateTime.Today),
        //     new (5, "Test item 5", false, DateTime.Now, DateTime.Today),
        // };
    }

    private void ToggleFilter()
    {
        _showOnlyIncomplete = !_showOnlyIncomplete;
    }
    
    private async Task HandleItemChanged()
    {
        _items = await ItemsClient.GetItems();
        StateHasChanged();
    }
    
    private async Task TestAddItem()
    {
        ItemDTO item = new ItemDTO("Test item", false, DateTime.Now);
        await ItemsClient.CreateItem(item);
        _items = await ItemsClient.GetItems();
        StateHasChanged();
    }
}