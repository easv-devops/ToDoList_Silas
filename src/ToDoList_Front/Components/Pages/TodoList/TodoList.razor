@page "/todolist"
@using ToDoList_Front.Clients
@rendermode InteractiveServer
@inject ItemsClient ItemsClient

<PageTitle>To-Do List</PageTitle>

<div class="todo-list">
    <CreateItem OnItemAdded="HandleItemAddedOrChanged" />
    @if (_items is null)
    {
        <p>Loading...</p>
    } else if (_items.Length == 0)
    {
        <p>There are currently no tasks.</p>
    } else
    {
        <div class="filters">
            @if (_showOnlyIncomplete)
            {
                <button class="filter-button inactive"
                        @onclick="ToggleFilter">
                    Show all
                </button>
            } else
            {
                <button class="filter-button"
                        @onclick="ToggleFilter">
                    Hide completed
                </button>
            }
        </div>
        @foreach (var item in _items)
        {
            if (!_showOnlyIncomplete || !item.is_completed)
            {
                <ListItem Item="@item" OnItemChanged="HandleItemAddedOrChanged" />
            }
        }
    }
</div>

@code {
    private Item[]? _items;
    private bool _showOnlyIncomplete;

    protected override async Task OnInitializedAsync()
    {
        var items = await ItemsClient.GetItems();
        _items = items.OrderByDescending(item => item.created_date).ToArray();
    }

    private void ToggleFilter()
    {
        _showOnlyIncomplete = !_showOnlyIncomplete;
    }
    
    private async Task HandleItemAddedOrChanged()
    {
        var items = await ItemsClient.GetItems();
        _items = items.OrderByDescending(item => item.created_date).ToArray();
        StateHasChanged();
    }
}