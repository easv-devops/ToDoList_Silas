@page "/gatetimer"
@using System.Threading
@rendermode InteractiveServer
@inject IJSRuntime Js
@implements IDisposable

<PageTitle>GATE Timer</PageTitle>

<div class="page">
    <p class="description">Timer for The Gold Saucer GATE in FFXIV</p>
    <div class="box @_state">
        @if (_state == "openNow")
        {
            <p class="openNow">OPEN NOW</p>
        }
        else
        {
            <p class="timeToOpen">@_timeToOpen</p>
            @if (_state == "soonOpen")
            {
                <p class="minLeft">minute left</p>
            } else {
                <p class="minLeft">minutes left</p>
            }
        }
    </div>
    <div class="time" @onclick="ToggleMute">
        @if (_muted)
        {
            <i class="bi bi-bell-slash-fill"></i>
        }
        else
        {
            <i class="bi bi-bell-fill"></i>
        }
        <p class="currentTime">@_currentTime.ToString("HH:mm:ss")</p>
    </div>
</div>

@code {
    private DateTime _currentTime;
    private int _timeToOpen;
    private Timer? _timer;
    private string _state = "";
    private bool _muted;

    protected override void OnInitialized()
    {
        _timer = new Timer(UpdateClock, null, 0, 1000);
        _currentTime = DateTime.Now;
        _timeToOpen = 20 - _currentTime.Minute % 20;
    }

    private void UpdateClock(object? state)
    {
        InvokeAsync(async () =>
        {
            _currentTime = DateTime.Now;
            _timeToOpen = 20 - _currentTime.Minute % 20;
            
            if (_timeToOpen == 20)
                _state = "openNow";
            else if (_timeToOpen == 1)
                _state = "soonOpen";
            else
                _state = "";
            
            if (_state == "openNow" && _currentTime.Second == 0 && !_muted)
                await Js.InvokeVoidAsync("playBigBeep");
            else if (_state == "soonOpen" && _currentTime.Second == 0 && !_muted)
                await Js.InvokeVoidAsync("playSmallBeep");

            StateHasChanged();
        });
    }
    
    private void ToggleMute()
    {
        _muted = !_muted;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}


