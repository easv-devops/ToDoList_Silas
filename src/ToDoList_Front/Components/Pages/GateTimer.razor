@page "/gatetimer"
@using System.Threading
@rendermode InteractiveServer
@inject IJSRuntime Js
@implements IDisposable

<PageTitle>GATE Timer</PageTitle>

<div class="page">
    <div class="darkmode @(_isDark ? "dark" : "")" @onclick="ToggleTheme">
        @if (_isDark)
        {
            <i class="bi bi-moon-stars-fill"></i>
        }
        else
        {
            <i class="bi bi-sun-fill"></i>
        }
    </div>
    <div class="content">
        <div class="box @_state @(_isDark ? "dark" : "")">
            @if (_state == "openNow")
            {
                <p class="openNow @(_isDark ? "dark" : "")">OPEN NOW</p>
            }
            else
            {
                <p class="timeToOpen @(_isDark ? "dark" : "")">@_timeToOpen</p>
                @if (_state == "soonOpen")
                {
                    <p class="minLeft @(_isDark ? "dark" : "")">minute left</p>
                }
                else
                {
                    <p class="minLeft @(_isDark ? "dark" : "")">minutes left</p>
                }
            }
        </div>
        <div class="time @(_isDark ? "dark" : "")" @onclick="ToggleMute">
            @if (_muted)
            {
                <i class="bi bi-bell-slash-fill @(_isDark ? "dark" : "")"></i>
            }
            else
            {
                <i class="bi bi-bell-fill @(_isDark ? "dark" : "")"></i>
            }
            <p class="currentTime @(_isDark ? "dark" : "")">@_currentTime.ToString("HH:mm:ss")</p>
        </div>
    </div>
</div>

@code {
    private DateTime _currentTime;
    private int _timeToOpen;
    private Timer? _timer;
    private string _state = "";
    private bool _muted;
    private bool _isDark;

    protected override void OnInitialized()
    {
        _timer = new Timer(UpdateClock, null, 0, 1000);
        _currentTime = DateTime.Now;
        _timeToOpen = 20 - _currentTime.Minute % 20;
    }

    private void UpdateClock(object? state)
    {
        InvokeAsync(async () =>
        {
            _currentTime = DateTime.Now;
            _timeToOpen = 20 - _currentTime.Minute % 20;
            
            if (_timeToOpen == 20)
                _state = "openNow";
            else if (_timeToOpen == 1)
                _state = "soonOpen";
            else
                _state = "";
            
            if (_state == "openNow" && _currentTime.Second == 0 && !_muted)
                await Js.InvokeVoidAsync("playBigBeep");
            else if (_state == "soonOpen" && _currentTime.Second == 0 && !_muted)
                await Js.InvokeVoidAsync("playSmallBeep");

            StateHasChanged();
        });
    }
    
    private void ToggleMute()
    {
        _muted = !_muted;
    }
    
    private async Task ToggleTheme()
    {
        _isDark = !_isDark;
        await Js.InvokeVoidAsync("switchTheme", _isDark);
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}


